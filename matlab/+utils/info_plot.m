function [] = info_plot(seqs, intervals)
%Draws passed parts of signal
%   seqs = array of cells, containing drawing info for sequences
%   intervals = array of cells, containing drawing info for intervals
    % init UI handles
    fig = figure('Color', 'w');
    ax = axes(fig, 'FontSize', 15, 'Position', [0.11 0.1100 0.7 0.8150]);
    holders = cell(1, length(seqs) + length(intervals));
    bottom = 0;
    for i = 1:length(seqs)
        [holder, bottom] = mk_row_seq(0, i, 'sequence');
        x = seqs{i}(1, :);
        y = seqs{i}(2, :);
        holder.disp = @(v, l, f, dy, xy, rAx) draw_seq(ax, x, y, dy, xy, rAx, v, l, f);
        holders{i} = holder;
    end
    
    for i = 1:length(intervals)
         holder = mk_row_int(bottom + 0.05, i, 'interval');
         ints = intervals{i};
         holder.disp = @(v, l, f) draw_int(ax, ints, v, l, f);
         holders{i + length(seqs)} = holder;
    end
    
    function replot(~, ~)
        cla(ax);
        hold(ax, 'on');
        legend();
        for i_ = 1:length(holders)
            visible = holders{i_}.cbox.Value;
            leg = holders{i_}.legend.String;
            flags = holders{i_}.flags.String;
            if (isfield(holders{i_}, 'dY'))
                dY = str2double(holders{i_}.dY.String);
                xY = str2double(holders{i_}.xY.String);
                rAx = holders{i_}.rAx.Value;
                holders{i_}.disp(visible, leg, flags, dY, xY, rAx);
            else
                holders{i_}.disp(visible, leg, flags);
            end
        end
    end
    
    % makes UI row with plot line control
    function [holder, bottom]= mk_row_int(h0, row, name0)
        h_all = ax.Position(2) + ax.Position(4) - h0;
        w_all = ax.Position(1) + ax.Position(3);
        h_row = 0.05;
        x_ivl = [w_all + 0.04 0.98];
        y_ivl = [h_all - h_row * row, h_all - h_row * (row - 1)];
        x0 = x_ivl(1);
        y0 = y_ivl(1);
        w = x_ivl(2) - x_ivl(1);
        h = y_ivl(2) - y_ivl(1);
        holder.cbox = uicontrol( ...
            fig,  ...
            'Style', 'checkbox', ...
            'Units', 'normalized', ...
            'Position', [x0, y0, w*0.1, h], ...
            'BackgroundColor', 'w', ...
            'Callback', @replot ...
        );
        holder.legend = uicontrol( ...
            fig,  ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.1, y0, w*0.7, h], ...
            'String', sprintf('%s %i', name0, row), ...
            'Callback', @replot ...
        );
        holder.flags = uicontrol( ...
            fig,  ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.8, y0, w*0.2, h], ...
            'String', 'g', ...
            'Callback', @replot ...
        );
        bottom = h_all - y_ivl(1);
    end

    % makes UI row with plot line control
    function [holder, bottom]= mk_row_seq(h0, row, name0)
        h_all = ax.Position(2) + ax.Position(4) - h0;
        w_all = ax.Position(1) + ax.Position(3);
        h_row = 0.05;
        x_ivl = [w_all + 0.04 0.98];
        y_ivl = [h_all - h_row * row, h_all - h_row * (row - 1)];
        x0 = x_ivl(1);
        y0 = y_ivl(1);
        w = x_ivl(2) - x_ivl(1);
        h = y_ivl(2) - y_ivl(1);
        holder.cbox = uicontrol( ...
            fig,  ...
            'Style', 'checkbox', ...
            'Units', 'normalized', ...
            'Position', [x0, y0, w*0.1, h], ...
            'BackgroundColor', 'w', ...
            'Callback', @replot ...
        );
        holder.legend = uicontrol( ...
            fig,  ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.1, y0 + h/2, w*0.7, h/2], ...
            'String', sprintf('%s %i', name0, row), ...
            'Callback', @replot ...
        );
        holder.flags = uicontrol( ...
            fig,  ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.8, y0 + h/2, w*0.2, h/2], ...
            'String', '', ...
            'Callback', @replot ...
        );
        uicontrol( ...
            fig,  ...
            'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.1, y0, w*0.15, h/2], ...
            'BackgroundColor', 'w', ...
            'HorizontalAlignment', 'right', ...
            'String', 'dY' ...
        );
        holder.dY = uicontrol( ...
            fig,  ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.25, y0, w*0.25, h/2], ...
            'String', '0', ...
            'Callback', @replot ...
        );
        uicontrol( ...
            fig,  ...
            'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.5, y0, w*0.15, h/2], ...
            'BackgroundColor', 'w', ...
            'HorizontalAlignment', 'right', ...
            'String', 'xY' ...
        );
        holder.xY = uicontrol( ...
            fig,  ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.65, y0, w*0.25, h/2], ...
            'String', '1', ...
            'Callback', @replot ...
        );
        holder.rAx = uicontrol( ...
            fig,  ...
            'Style', 'checkbox', ...
            'Units', 'normalized', ...
            'Position', [x0 + w*0.9, y0, w*0.1, h/2], ...
            'BackgroundColor', 'w', ...
            'Callback', @replot ...
        );
        bottom = h_all - y_ivl(1);
    end
end

% displays time sequence
function draw_seq(ax, X, Y, dY, xY, axR, visible, label, flags)
    if (visible)
        if (axR)
            yyaxis(ax, 'right');
        end
        h = plot(ax, X, Y * xY + dY, flags);
        hLegend = findobj(gcf, 'Type', 'Legend');
        if (~isempty(hLegend))
            hLegend.String{end} = label;
        else
            legend(h, label);
        end
    end
end

% displays intervals
function draw_int(ax, ints, visible, label, flags)
    if (visible)
        
        hLegend = findobj(gcf, 'Type', 'Legend');
        if (isempty(hLegend))
            hLegend = legend();
        end
        str0 = hLegend.String;
        
        legend off
        low = ax.YLim(1);
        heigh = ax.YLim(2);
        for i_ = 1:size(ints, 1)
            interv = ints(i_, :);
            h = fill(ax, ...
                [interv(1), interv(1), interv(2), interv(2)], ...
                [low, heigh, heigh, low], ...
                flags ...
            );
            alpha(h, 0.2);
        end
        legend([str0, label]);
    end
end